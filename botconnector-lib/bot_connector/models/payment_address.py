# coding: utf-8

"""
    Microsoft Bot Connector API - v3.0

    The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)    Â© 2016 Microsoft

    The version of the OpenAPI document: v3
    Contact: botframework@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PaymentAddress(BaseModel):
    """
    Deprecated. Bot Framework no longer supports payments.
    """ # noqa: E501
    country: Optional[StrictStr] = Field(default=None, description="This is the CLDR (Common Locale Data Repository) region code. For example, US, GB, CN, or JP")
    address_line: Optional[List[StrictStr]] = Field(default=None, description="This is the most specific part of the address. It can include, for example, a street name, a house number, apartment number, a rural delivery route, descriptive instructions, or a post office box number.", alias="addressLine")
    region: Optional[StrictStr] = Field(default=None, description="This is the top level administrative subdivision of the country. For example, this can be a state, a province, an oblast, or a prefecture.")
    city: Optional[StrictStr] = Field(default=None, description="This is the city/town portion of the address.")
    dependent_locality: Optional[StrictStr] = Field(default=None, description="This is the dependent locality or sublocality within a city. For example, used for neighborhoods, boroughs, districts, or UK dependent localities.", alias="dependentLocality")
    postal_code: Optional[StrictStr] = Field(default=None, description="This is the postal code or ZIP code, also known as PIN code in India.", alias="postalCode")
    sorting_code: Optional[StrictStr] = Field(default=None, description="This is the sorting code as used in, for example, France.", alias="sortingCode")
    language_code: Optional[StrictStr] = Field(default=None, description="This is the BCP-47 language code for the address. It's used to determine the field separators and the order of fields when formatting the address for display.", alias="languageCode")
    organization: Optional[StrictStr] = Field(default=None, description="This is the organization, firm, company, or institution at this address.")
    recipient: Optional[StrictStr] = Field(default=None, description="This is the name of the recipient or contact person.")
    phone: Optional[StrictStr] = Field(default=None, description="This is the phone number of the recipient or contact person.")
    __properties: ClassVar[List[str]] = ["country", "addressLine", "region", "city", "dependentLocality", "postalCode", "sortingCode", "languageCode", "organization", "recipient", "phone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "addressLine": obj.get("addressLine"),
            "region": obj.get("region"),
            "city": obj.get("city"),
            "dependentLocality": obj.get("dependentLocality"),
            "postalCode": obj.get("postalCode"),
            "sortingCode": obj.get("sortingCode"),
            "languageCode": obj.get("languageCode"),
            "organization": obj.get("organization"),
            "recipient": obj.get("recipient"),
            "phone": obj.get("phone")
        })
        return _obj



# coding: utf-8

"""
    Microsoft Bot Connector API - v3.0

    The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)    Â© 2016 Microsoft

    The version of the OpenAPI document: v3
    Contact: botframework@microsoft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class ActivityTypes(str, Enum):
    """
    Types of Activities
    """

    """
    allowed enum values
    """
    MESSAGE = 'message'
    CONTACTRELATIONUPDATE = 'contactRelationUpdate'
    CONVERSATIONUPDATE = 'conversationUpdate'
    TYPING = 'typing'
    ENDOFCONVERSATION = 'endOfConversation'
    EVENT = 'event'
    INVOKE = 'invoke'
    DELETEUSERDATA = 'deleteUserData'
    MESSAGEUPDATE = 'messageUpdate'
    MESSAGEDELETE = 'messageDelete'
    INSTALLATIONUPDATE = 'installationUpdate'
    MESSAGEREACTION = 'messageReaction'
    SUGGESTION = 'suggestion'
    TRACE = 'trace'
    HANDOFF = 'handoff'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ActivityTypes from a JSON string"""
        return cls(json.loads(json_str))



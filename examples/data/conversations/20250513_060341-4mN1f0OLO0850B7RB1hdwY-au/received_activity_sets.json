[
  {
    "activities": [
      {
        "type": "event",
        "id": "4mN1f0OLO0850B7RB1hdwY-au|0000000",
        "timestamp": "2025-05-13T06:03:44.4044881Z",
        "serviceUrl": "https://directline.botframework.com/",
        "channelId": "directline",
        "from": {
          "id": "c34a1ecc-c071-4c1a-98dd-7398915b1f4e"
        },
        "conversation": {
          "id": "4mN1f0OLO0850B7RB1hdwY-au"
        },
        "recipient": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9@BgLoquZzQf61FwhictbIX8YHGr8nOPQ6ed97CplUknTAFfuKnR85JQQJ99BDACZoyfiAArohAAABAZBS3jB0",
          "name": "Playground"
        },
        "locale": "en-AU",
        "value": {
          "user_first_name": "John",
          "user_last_name": "Doe",
          "user_email": "John.doe@hotmail.com",
          "current_page_url": "https://examplebank.com/credit-cards/fees-and-charges",
          "page_title": "Compare Credit Cards – Example Bank",
          "element_clicked_to_initiate_chat": "#cc-help-chat",
          "device_type": "desktop",
          "device": "macOS 14 / Safari 17.0",
          "viewport_width": 1440,
          "viewport_height": 900,
          "connection_type": "wifi",
          "visit_start_time": "2025-05-13T06:03:41.491225+00:00",
          "last_conversation_time": null,
          "user_id": "c34a1ecc-c071-4c1a-98dd-7398915b1f4e",
          "language": "en",
          "timezone": "Australia/Brisbane",
          "local_time": "2025-05-13T06:03:41.491225+00:00",
          "location": {
            "country": "Australia",
            "region": "Queensland",
            "city": "Brisbane",
            "latitude": -27.4679,
            "longitude": 153.0281
          },
          "marketing_opt_in": true,
          "app_version": "web-2.19.7",
          "widget_version": "chat-1.4.2",
          "navigation_history": [
            {
              "order": 1,
              "element": "#cc-fee-details"
            },
            {
              "order": 2,
              "element": "#cc-interest-rate-tab"
            },
            {
              "order": 3,
              "element": "#cc-faq-interest-free"
            },
            {
              "order": 4,
              "element": "#cc-faq-annual-fee"
            },
            {
              "order": 5,
              "element": "#cc-compare-nav"
            },
            {
              "order": 6,
              "element": "#cc-terms-download"
            },
            {
              "order": 7,
              "element": "#filter-balance-transfer"
            },
            {
              "order": 8,
              "element": "#cc-rewards-explainer"
            },
            {
              "order": 9,
              "element": "#cc-signup-bonus"
            },
            {
              "order": 10,
              "element": "#cc-recalculate-limit"
            },
            {
              "order": 11,
              "element": "#main-nav-creditcards"
            },
            {
              "order": 12,
              "element": "#hero-cta-learn-more"
            }
          ]
        },
        "name": "setConversationContext"
      }
    ]
  },
  {
    "activities": [
      {
        "type": "message",
        "id": "4mN1f0OLO0850B7RB1hdwY-au|0000001",
        "timestamp": "2025-05-13T06:03:45.3780286Z",
        "serviceUrl": "https://directline.botframework.com/",
        "channelId": "directline",
        "from": {
          "id": "c34a1ecc-c071-4c1a-98dd-7398915b1f4e"
        },
        "conversation": {
          "id": "4mN1f0OLO0850B7RB1hdwY-au"
        },
        "recipient": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9@BgLoquZzQf61FwhictbIX8YHGr8nOPQ6ed97CplUknTAFfuKnR85JQQJ99BDACZoyfiAArohAAABAZBS3jB0",
          "name": "Playground"
        },
        "locale": "en-AU",
        "text": "Hi bot, tell me about WebSockets and ActivitySets in Direct Line."
      }
    ]
  },
  {
    "activities": [
      {
        "type": "message",
        "id": "4mN1f0OLO0850B7RB1hdwY-au|0000002",
        "timestamp": "2025-05-13T06:03:46.2546212Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4mN1f0OLO0850B7RB1hdwY-au"
        },
        "textFormat": "markdown",
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "text": "Context received ➜ Just to prove it. This is the page you opened this chat bot on: https://examplebank.com/credit-cards/fees-and-charges and you selected this element on that page to open this chat: #cc-help-chat",
        "inputHint": "acceptingInput",
        "attachments": [],
        "entities": [],
        "replyToId": "4mN1f0OLO0850B7RB1hdwY-au|0000000",
        "listenFor": [],
        "textHighlights": []
      }
    ],
    "watermark": "2"
  },
  {
    "activities": [
      {
        "type": "event",
        "id": "4mN1f0OLO0850B7RB1hdwY-au|0000003",
        "timestamp": "2025-05-13T06:03:47.6686839Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4mN1f0OLO0850B7RB1hdwY-au"
        },
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "attachments": [],
        "entities": [],
        "replyToId": "4mN1f0OLO0850B7RB1hdwY-au|0000001",
        "valueType": "DynamicPlanReceived",
        "value": {
          "steps": [
            "P:UniversalSearchTool"
          ],
          "isFinalPlan": false,
          "planIdentifier": "79b2cf9e-096c-4180-925f-e46802ab152b",
          "toolDefinitions": []
        },
        "name": "DynamicPlanReceived",
        "listenFor": [],
        "textHighlights": []
      }
    ],
    "watermark": "3"
  },
  {
    "activities": [
      {
        "type": "event",
        "id": "4mN1f0OLO0850B7RB1hdwY-au|0000004",
        "timestamp": "2025-05-13T06:03:48.0903684Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4mN1f0OLO0850B7RB1hdwY-au"
        },
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "attachments": [],
        "entities": [],
        "replyToId": "4mN1f0OLO0850B7RB1hdwY-au|0000001",
        "valueType": "DynamicPlanReceivedDebug",
        "value": {
          "summary": "",
          "ask": "Hi bot, tell me about WebSockets and ActivitySets in Direct Line.",
          "planIdentifier": "79b2cf9e-096c-4180-925f-e46802ab152b",
          "isFinalPlan": false
        },
        "name": "DynamicPlanReceivedDebug",
        "listenFor": [],
        "textHighlights": []
      }
    ],
    "watermark": "4"
  },
  {
    "activities": [
      {
        "type": "event",
        "id": "4mN1f0OLO0850B7RB1hdwY-au|0000005",
        "timestamp": "2025-05-13T06:03:48.5324072Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4mN1f0OLO0850B7RB1hdwY-au"
        },
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "attachments": [],
        "entities": [],
        "replyToId": "4mN1f0OLO0850B7RB1hdwY-au|0000001",
        "valueType": "DynamicPlanStepTriggered",
        "value": {
          "planIdentifier": "79b2cf9e-096c-4180-925f-e46802ab152b",
          "stepId": "101aadef-9fd6-457c-b448-83bd0f28d0ec",
          "taskDialogId": "P:UniversalSearchTool",
          "thought": "This action needs to be done to gather detailed information about WebSockets and ActivitySets in Direct Line.",
          "state": "inProgress",
          "hasRecommendations": false,
          "type": "KnowledgeSource"
        },
        "name": "DynamicPlanStepTriggered",
        "listenFor": [],
        "textHighlights": []
      }
    ],
    "watermark": "5"
  },
  {
    "activities": [
      {
        "type": "event",
        "id": "4mN1f0OLO0850B7RB1hdwY-au|0000006",
        "timestamp": "2025-05-13T06:03:48.9542943Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4mN1f0OLO0850B7RB1hdwY-au"
        },
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "attachments": [],
        "entities": [],
        "replyToId": "4mN1f0OLO0850B7RB1hdwY-au|0000001",
        "valueType": "DynamicPlanStepBindUpdate",
        "value": {
          "taskDialogId": "P:UniversalSearchTool",
          "stepId": "101aadef-9fd6-457c-b448-83bd0f28d0ec",
          "arguments": {
            "search_keywords": "WebSockets, ActivitySets, Direct Line",
            "search_query": "WebSockets and ActivitySets in Direct Line"
          },
          "planIdentifier": "79b2cf9e-096c-4180-925f-e46802ab152b"
        },
        "name": "DynamicPlanStepBindUpdate",
        "listenFor": [],
        "textHighlights": []
      }
    ],
    "watermark": "6"
  },
  {
    "activities": [
      {
        "type": "typing",
        "id": "4mN1f0OLO0850B7RB1hdwY-au|AuhahlxcJEy",
        "timestamp": "2025-05-13T06:03:49.7879049Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4mN1f0OLO0850B7RB1hdwY-au"
        },
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "attachments": [],
        "entities": [],
        "replyToId": "4mN1f0OLO0850B7RB1hdwY-au|0000001",
        "listenFor": [],
        "textHighlights": []
      }
    ]
  },
  {
    "activities": [
      {
        "type": "typing",
        "id": "4mN1f0OLO0850B7RB1hdwY-au|Akc2r7PzCBn",
        "timestamp": "2025-05-13T06:03:53.8042561Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4mN1f0OLO0850B7RB1hdwY-au"
        },
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "attachments": [],
        "entities": [],
        "replyToId": "4mN1f0OLO0850B7RB1hdwY-au|0000001",
        "listenFor": [],
        "textHighlights": []
      }
    ]
  },
  {
    "activities": [
      {
        "type": "event",
        "id": "4mN1f0OLO0850B7RB1hdwY-au|0000007",
        "timestamp": "2025-05-13T06:03:54.7572706Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4mN1f0OLO0850B7RB1hdwY-au"
        },
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "attachments": [],
        "entities": [],
        "replyToId": "4mN1f0OLO0850B7RB1hdwY-au|0000001",
        "valueType": "UniversalSearchToolTraceData",
        "value": {
          "toolId": "P:UniversalSearchTool",
          "knowledgeSources": [
            "BingUnscopedSearchKnowledge"
          ],
          "outputKnowledgeSources": [],
          "fullResults": [],
          "filteredResults": []
        },
        "name": "UniversalSearchToolTraceData",
        "listenFor": [],
        "textHighlights": []
      }
    ],
    "watermark": "7"
  },
  {
    "activities": [
      {
        "type": "event",
        "id": "4mN1f0OLO0850B7RB1hdwY-au|0000008",
        "timestamp": "2025-05-13T06:03:55.1956496Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4mN1f0OLO0850B7RB1hdwY-au"
        },
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "attachments": [],
        "entities": [],
        "replyToId": "4mN1f0OLO0850B7RB1hdwY-au|0000001",
        "valueType": "DynamicPlanStepFinished",
        "value": {
          "taskDialogId": "P:UniversalSearchTool",
          "stepId": "101aadef-9fd6-457c-b448-83bd0f28d0ec",
          "observation": {
            "search_result": {
              "Text": {
                "CitationSources": [
                  {
                    "Id": "https://learn.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-receive-activities?view=azure-bot-service-4.0",
                    "Name": "Receive activities from the bot - Bot Service | Microsoft Learn",
                    "Text": "\"Receive activities from the bot - Bot Service | Microsoft Learn\\nLearn\\nAzure\\nAI Services\\nAI Bot Service\\nReceive activities from the bot in Direct Line API 3.0\\nArticle\\n10/09/2024\\n9 contributors\\nFeedback\\nUsing the Direct Line 3.0 protocol, clients can receive activities via WebSocket stream or retrieve activities by issuing HTTP GET requests.\\nWebSocket vs HTTP GET\\nA streaming WebSocket efficiently pushes messages to clients, whereas the GET interface enables clients to explicitly request messages. Although the WebSocket mechanism is often preferred due to its efficiency, the GET mechanism can be useful for clients that are unable to use WebSockets.\\nThe service allows only 1 WebSocket connection per conversation. Direct Line may close additional WebSocket connections with a reason value of collision.\\nNot all activity types are available both via WebSocket and via HTTP GET. The following table describes the availability of the various activity types for clients that use the Direct Line protocol.\\nActivity type\\nAvailability\\nmessage\\nHTTP GET and WebSocket\\ntyping\\nWebSocket only\\nconversationUpdate\\nNot sent/received via client\\ncontactRelationUpdate\\nNot supported in Direct Line\\nendOfConversation\\nHTTP GET and WebSocket\\nall other activity types\\nHTTP GET and WebSocket\\nReceive activities via WebSocket stream\\nWhen a client sends a Start Conversation request to open a conversation with a bot, the service\\u0027s response includes a streamUrl property that the client can subsequently use to connect via WebSocket. The stream URL is preauthorized and therefore the client\\u0027s request to connect via WebSocket does NOT require an Authorization header.\\nThe following example shows a request that uses a streamUrl to connect via WebSocket.\\nHTTP\\nCopy\\n--  connect to wss://directline.botframework.com --\\nGET /v3/directline/conversations/abc123/stream?t=RCurR_XV9ZA.cwA...\\u0022\\nUpgrade: websocket\\n Connection: upgrade\\n[other headers]\\n\\nThe service responds with status code HTTP 101 (\\u0022Switching Protocols\\u0022).\\nHTTP\\nCopy\\nHTTP/1.1  101  Switching Protocols\\n[other headers]\\n\\nReceive messages\\nAfter it connects via WebSocket, a client may receive these types of messages from the Direct Line service:\\nA message that contains an ActivitySet that includes one or more activities and a watermark (described below).\\nAn empty message, which the Direct Line service uses to ensure the connection is still valid.\\nAdditional types, to be defined later. These types are identified by the properties in the JSON root.\\nAn ActivitySet contains messages sent by the bot and by all users in the conversation. The following example shows an ActivitySet that contains a single message.\\nJSON\\nCopy\\n{\\n     \\u0022activities\\u0022: [\\n        {\\n             \\u0022type\\u0022:  \\u0022message\\u0022,\\n             \\u0022channelId\\u0022:  \\u0022directline\\u0022,\\n             \\u0022conversation\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022abc123\\u0022 \\n            },\\n             \\u0022id\\u0022:  \\u0022abc123|0000\\u0022,\\n             \\u0022from\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022user1\\u0022 \\n            },\\n             \\u0022text\\u0022:  \\u0022hello\\u0022 \\n        }\\n    ],\\n     \\u0022watermark\\u0022:  \\u00220000a-42\\u0022 \\n}\\n\\nProcess messages\\nA client should keep track of the watermark value that it receives in each ActivitySet, so that it may use the watermark to guarantee that no messages are lost if it loses its connection and needs to reconnect to the conversation. If the client receives an ActivitySet wherein the watermark property is null or missing, it should ignore that value and not overwrite the prior watermark that it received.\\nA client should ignore empty messages that it receives from the Direct Line service.\\nA client may send empty messages to the Direct Line service to verify connectivity. The Direct Line service will ignore empty messages that it receives from the client.\\nThe Direct Line service may forcibly close the WebSocket connection under certain conditions. If the client has not received an endOfConversation activity, it may generate a new WebSocket stream URL that it can use to reconnect to the conversation.\\nThe WebSocket stream contains live updates and very recent messages (since the call to connect via WebSocket was issued) but it doesn\\u0027t include messages that were sent prior to the most recent POST to /v3/directline/conversations/{id}. To retrieve messages that were sent earlier in the conversation, use HTTP GET as described below.\\nRetrieve activities with HTTP GET\\nClients that are unable to use WebSockets can retrieve activities by using HTTP GET.\\nTo retrieve messages for a specific conversation, issue a GET request to the /v3/directline/conversations/{conversationId}/activities endpoint, optionally specifying the watermark parameter to indicate the most recent message seen by the client.\\nThe following snippets provide an example of the Get Conversation Activities request and response. The Get Conversation Activities response contains watermark as a property of the ActivitySet. Clients should page through the available activities by advancing the watermark value until no activities are returned.\\nRequest\\nHTTP\\nCopy\\nGET https://directline.botframework.com/v3/directline/conversations/abc123/activities?watermark=0001a-94\\nAuthorization: Bearer RCurR_XV9ZA.cwA.BKA.iaJrC8xpy8qbOF5xnR2vtCX7CZj0LdjAPGfiCpg4Fv0\\n\\nResponse\\nHTTP\\nCopy\\nHTTP/1.1  200  OK\\n[other headers]\\n\\nJSON\\nCopy\\n{\\n     \\u0022activities\\u0022: [\\n        {\\n             \\u0022type\\u0022:  \\u0022message\\u0022,\\n             \\u0022channelId\\u0022:  \\u0022directline\\u0022,\\n             \\u0022conversation\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022abc123\\u0022 \\n            },\\n             \\u0022id\\u0022:  \\u0022abc123|0000\\u0022,\\n             \\u0022from\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022user1\\u0022 \\n            },\\n             \\u0022text\\u0022:  \\u0022hello\\u0022 \\n        }, \\n        {\\n             \\u0022type\\u0022:  \\u0022message\\u0022,\\n             \\u0022channelId\\u0022:  \\u0022directline\\u0022,\\n             \\u0022conversation\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022abc123\\u0022 \\n            },\\n             \\u0022id\\u0022:  \\u0022abc123|0001\\u0022,\\n             \\u0022from\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022bot1\\u0022 \\n            },\\n             \\u0022text\\u0022:  \\u0022Nice to see you, user1!\\u0022 \\n        }\\n    ],\\n     \\u0022watermark\\u0022:  \\u00220001a-95\\u0022 \\n}\\n\\nTiming considerations\\nMost clients wish to retain a complete message history. Even though Direct Line is a multi-part protocol with potential timing gaps, the protocol and service is designed to make it easy to build a reliable client.\\nThe watermark property that is sent in the WebSocket stream and Get Conversation Activities response is reliable. A client won\\u0027t miss any messages as long as it replays the watermark verbatim.\\nWhen a client starts a conversation and connects to the WebSocket stream, any activities that are sent after the POST but before the socket is opened are replayed before new activities.\\nWhen a client issues a Get Conversation Activities request (to refresh history) while it\\u0027s connected to the WebSocket stream, activities may be duplicated across both channels. Clients should keep track of all known activity IDs so that they\\u0027re able to reject duplicate activities, should they occur.\\nClients that poll using HTTP GET should choose a polling interval that matches their intended use.\\nService-to-service applications often use a polling interval of 5s or 10s.\\nClient-facing applications often use a polling interval of 1s, and issue a single additional request shortly after every message that the client sends (to rapidly retrieve a bot\\u0027s response). This delay can be as short at 300ms but should be tuned based on the bot\\u0027s speed and transit time. Polling shouldn\\u0027t be more frequent than once per second for any extended period of time.\\nAdditional resources\\nKey concepts\\nAuthentication\\nStart a conversation\\nReconnect to a conversation\\nSend an activity to the bot\\nEnd a conversation\\nLearn how to receive activity updates from bots. See how to use version 3.0 of the Direct Line API to connect by using WebSocket streams or HTTP GET requests.\"",
                    "Type": "Unknown",
                    "Url": "https://learn.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-receive-activities?view=azure-bot-service-4.0"
                  }
                ],
                "Content": "### **WebSockets in Direct Line**\n\n**WebSocket Connection:**\n- Clients can receive activities via WebSocket stream or retrieve activities by issuing HTTP GET requests.\n- A streaming WebSocket efficiently pushes messages to clients, whereas the GET interface enables clients to explicitly request messages.\n- The service allows only one WebSocket connection per conversation. Direct Line may close additional WebSocket connections with a reason value of collision.\n- When a client sends a Start Conversation request to open a conversation with a bot, the service's response includes a streamUrl property that the client can subsequently use to connect via WebSocket. The stream URL is preauthorized and does not require an Authorization header.\n- The service responds with status code HTTP 101 (\"Switching Protocols\") when connecting via WebSocket [1].\n\n**Receiving Messages:**\n- After connecting via WebSocket, a client may receive:\n  - A message containing an ActivitySet with one or more activities and a watermark.\n  - An empty message to ensure the connection is still valid.\n  - Additional types identified by properties in the JSON root.\n- The WebSocket stream contains live updates and very recent messages but does not include messages sent prior to the most recent POST to /v3/directline/conversations/{id} [1].\n\n### **ActivitySets in Direct Line**\n\n**ActivitySet Structure:**\n- An ActivitySet contains messages sent by the bot and all users in the conversation.\n- Example of an ActivitySet:\n  ```json\n  {\n      \"activities\": [\n          {\n              \"type\": \"message\",\n              \"channelId\": \"directline\",\n              \"conversation\": {\n                  \"id\": \"abc123\"\n              },\n              \"id\": \"abc123|0000\",\n              \"from\": {\n                  \"id\": \"user1\"\n              },\n              \"text\": \"hello\"\n          }\n      ],\n      \"watermark\": \"0000a-42\"\n  }\n  ```\n- Clients should keep track of the watermark value received in each ActivitySet to ensure no messages are lost if the connection is lost and needs to be reconnected [1].\n\n**Processing Messages:**\n- Clients should ignore empty messages received from the Direct Line service.\n- Clients may send empty messages to verify connectivity, which the Direct Line service will ignore.\n- The Direct Line service may forcibly close the WebSocket connection under certain conditions. If the client has not received an endOfConversation activity, it may generate a new WebSocket stream URL to reconnect to the conversation [1].\n\n**Retrieving Activities with HTTP GET:**\n- Clients unable to use WebSockets can retrieve activities using HTTP GET.\n- To retrieve messages for a specific conversation, issue a GET request to the /v3/directline/conversations/{conversationId}/activities endpoint, optionally specifying the watermark parameter to indicate the most recent message seen by the client [1].\n\n**Timing Considerations:**\n- Most clients wish to retain a complete message history. The watermark property sent in the WebSocket stream and Get Conversation Activities response is reliable.\n- Clients should keep track of all known activity IDs to reject duplicate activities if they occur.\n- Polling intervals should match the intended use, with service-to-service applications often using a polling interval of 5s or 10s, and client-facing applications using a polling interval of 1s [1].",
                "MarkdownContent": "### **WebSockets in Direct Line**\n\n**WebSocket Connection:**\n- Clients can receive activities via WebSocket stream or retrieve activities by issuing HTTP GET requests.\n- A streaming WebSocket efficiently pushes messages to clients, whereas the GET interface enables clients to explicitly request messages.\n- The service allows only one WebSocket connection per conversation. Direct Line may close additional WebSocket connections with a reason value of collision.\n- When a client sends a Start Conversation request to open a conversation with a bot, the service's response includes a streamUrl property that the client can subsequently use to connect via WebSocket. The stream URL is preauthorized and does not require an Authorization header.\n- The service responds with status code HTTP 101 (\"Switching Protocols\") when connecting via WebSocket [1].\n\n**Receiving Messages:**\n- After connecting via WebSocket, a client may receive:\n  - A message containing an ActivitySet with one or more activities and a watermark.\n  - An empty message to ensure the connection is still valid.\n  - Additional types identified by properties in the JSON root.\n- The WebSocket stream contains live updates and very recent messages but does not include messages sent prior to the most recent POST to /v3/directline/conversations/{id} [1].\n\n### **ActivitySets in Direct Line**\n\n**ActivitySet Structure:**\n- An ActivitySet contains messages sent by the bot and all users in the conversation.\n- Example of an ActivitySet:\n  ```json\n  {\n      \"activities\": [\n          {\n              \"type\": \"message\",\n              \"channelId\": \"directline\",\n              \"conversation\": {\n                  \"id\": \"abc123\"\n              },\n              \"id\": \"abc123|0000\",\n              \"from\": {\n                  \"id\": \"user1\"\n              },\n              \"text\": \"hello\"\n          }\n      ],\n      \"watermark\": \"0000a-42\"\n  }\n  ```\n- Clients should keep track of the watermark value received in each ActivitySet to ensure no messages are lost if the connection is lost and needs to be reconnected [1].\n\n**Processing Messages:**\n- Clients should ignore empty messages received from the Direct Line service.\n- Clients may send empty messages to verify connectivity, which the Direct Line service will ignore.\n- The Direct Line service may forcibly close the WebSocket connection under certain conditions. If the client has not received an endOfConversation activity, it may generate a new WebSocket stream URL to reconnect to the conversation [1].\n\n**Retrieving Activities with HTTP GET:**\n- Clients unable to use WebSockets can retrieve activities using HTTP GET.\n- To retrieve messages for a specific conversation, issue a GET request to the /v3/directline/conversations/{conversationId}/activities endpoint, optionally specifying the watermark parameter to indicate the most recent message seen by the client [1].\n\n**Timing Considerations:**\n- Most clients wish to retain a complete message history. The watermark property sent in the WebSocket stream and Get Conversation Activities response is reliable.\n- Clients should keep track of all known activity IDs to reject duplicate activities if they occur.\n- Polling intervals should match the intended use, with service-to-service applications often using a polling interval of 5s or 10s, and client-facing applications using a polling interval of 1s [1].\n\n[1]: https://learn.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-receive-activities?view=azure-bot-service-4.0 \"Receive activities from the bot - Bot Service | Microsoft Learn\""
              }
            }
          },
          "planUsedOutputs": {},
          "planIdentifier": "79b2cf9e-096c-4180-925f-e46802ab152b",
          "state": "completed",
          "hasRecommendations": false
        },
        "name": "DynamicPlanStepFinished",
        "listenFor": [],
        "textHighlights": []
      }
    ],
    "watermark": "8"
  },
  {
    "activities": [
      {
        "type": "typing",
        "id": "4mN1f0OLO0850B7RB1hdwY-au|LvwRTyrty8E",
        "timestamp": "2025-05-13T06:03:57.799147Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4mN1f0OLO0850B7RB1hdwY-au"
        },
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "attachments": [],
        "entities": [],
        "replyToId": "4mN1f0OLO0850B7RB1hdwY-au|0000001",
        "listenFor": [],
        "textHighlights": []
      }
    ]
  },
  {
    "activities": [
      {
        "type": "typing",
        "id": "4mN1f0OLO0850B7RB1hdwY-au|6a2ohpLg8sc",
        "timestamp": "2025-05-13T06:04:01.806959Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4mN1f0OLO0850B7RB1hdwY-au"
        },
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "attachments": [],
        "entities": [],
        "replyToId": "4mN1f0OLO0850B7RB1hdwY-au|0000001",
        "listenFor": [],
        "textHighlights": []
      }
    ]
  },
  {
    "activities": [
      {
        "type": "message",
        "id": "4mN1f0OLO0850B7RB1hdwY-au|0000009",
        "timestamp": "2025-05-13T06:04:01.9117681Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4mN1f0OLO0850B7RB1hdwY-au"
        },
        "textFormat": "markdown",
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "text": "### WebSockets in Direct Line\n\n**WebSocket Connection:**\n- Clients can receive activities via WebSocket stream or retrieve activities by issuing HTTP GET requests.\n- A streaming WebSocket efficiently pushes messages to clients, whereas the GET interface enables clients to explicitly request messages.\n- The service allows only one WebSocket connection per conversation. Direct Line may close additional WebSocket connections with a reason value of collision.\n- When a client sends a Start Conversation request to open a conversation with a bot, the service's response includes a streamUrl property that the client can subsequently use to connect via WebSocket. The stream URL is preauthorized and does not require an Authorization header.\n- The service responds with status code HTTP 101 (\"Switching Protocols\") when connecting via WebSocket.\n\n**Receiving Messages:**\n- After connecting via WebSocket, a client may receive:\n  - A message containing an ActivitySet with one or more activities and a watermark.\n  - An empty message to ensure the connection is still valid.\n  - Additional types identified by properties in the JSON root.\n- The WebSocket stream contains live updates and very recent messages but does not include messages sent prior to the most recent POST to /v3/directline/conversations/{id}.\n\n### ActivitySets in Direct Line\n\n**ActivitySet Structure:**\n- An ActivitySet contains messages sent by the bot and all users in the conversation.\n- Example of an ActivitySet:\n  ```json\n  {\n    \"activities\": [\n      {\n        \"type\": \"message\",\n        \"channelId\": \"directline\",\n        \"conversation\": {\n          \"id\": \"abc123\"\n        },\n        \"id\": \"abc123|0000\",\n        \"from\": {\n          \"id\": \"user1\"\n        },\n        \"text\": \"hello\"\n      }\n    ],\n    \"watermark\": \"0000a-42\"\n  }\n  ```\n- Clients should keep track of the watermark value received in each ActivitySet to ensure no messages are lost if the connection is lost and needs to be reconnected.\n\n**Processing Messages:**\n- Clients should ignore empty messages received from the Direct Line service.\n- Clients may send empty messages to verify connectivity, which the Direct Line service will ignore.\n- The Direct Line service may forcibly close the WebSocket connection under certain conditions. If the client has not received an endOfConversation activity, it may generate a new WebSocket stream URL to reconnect to the conversation.\n\n**Retrieving Activities with HTTP GET:**\n- Clients unable to use WebSockets can retrieve activities using HTTP GET.\n- To retrieve messages for a specific conversation, issue a GET request to the /v3/directline/conversations/{conversationId}/activities endpoint, optionally specifying the watermark parameter to indicate the most recent message seen by the client.\n\n**Timing Considerations:**\n- Most clients wish to retain a complete message history. The watermark property sent in the WebSocket stream and Get Conversation Activities response is reliable.\n- Clients should keep track of all known activity IDs to reject duplicate activities if they occur.\n- Polling intervals should match the intended use, with service-to-service applications often using a polling interval of 5s or 10s, and client-facing applications using a polling interval of 1s.",
        "inputHint": "acceptingInput",
        "attachments": [],
        "entities": [
          {
            "type": "https://schema.org/Message",
            "citation": [],
            "@type": "Message",
            "@id": "",
            "additionalType": [
              "AIGeneratedContent"
            ],
            "@context": "https://schema.org"
          }
        ],
        "replyToId": "4mN1f0OLO0850B7RB1hdwY-au|0000001",
        "listenFor": [],
        "textHighlights": []
      }
    ],
    "watermark": "9"
  },
  {
    "activities": [
      {
        "type": "event",
        "id": "4mN1f0OLO0850B7RB1hdwY-au|0000010",
        "timestamp": "2025-05-13T06:04:02.337297Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4mN1f0OLO0850B7RB1hdwY-au"
        },
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "attachments": [],
        "entities": [],
        "replyToId": "4mN1f0OLO0850B7RB1hdwY-au|0000001",
        "valueType": "DynamicPlanFinished",
        "value": {
          "planId": "951d49d2-995a-4e1a-ba92-c67e95f32c76"
        },
        "name": "DynamicPlanFinished",
        "listenFor": [],
        "textHighlights": []
      }
    ],
    "watermark": "10"
  },
  {
    "activities": [
      {
        "type": "message",
        "id": "4mN1f0OLO0850B7RB1hdwY-au|0000011",
        "timestamp": "2025-05-13T06:04:02.7680249Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4mN1f0OLO0850B7RB1hdwY-au"
        },
        "textFormat": "markdown",
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "text": "Did that answer your question?",
        "inputHint": "acceptingInput",
        "suggestedActions": {
          "to": [],
          "actions": [
            {
              "type": "imBack",
              "title": "Yes",
              "text": "Yes",
              "value": "Yes"
            },
            {
              "type": "imBack",
              "title": "No",
              "text": "No",
              "value": "No"
            }
          ]
        },
        "attachments": [],
        "entities": [],
        "replyToId": "4mN1f0OLO0850B7RB1hdwY-au|0000001",
        "listenFor": [],
        "textHighlights": []
      }
    ],
    "watermark": "11"
  }
]
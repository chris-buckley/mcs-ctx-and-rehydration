[
  {
    "activities": [
      {
        "type": "event",
        "id": "4dXItL2sJv2BiCN5mbJZf6-au|0000000",
        "timestamp": "2025-05-13T04:46:11.12941Z",
        "serviceUrl": "https://directline.botframework.com/",
        "channelId": "directline",
        "from": {
          "id": "PythonDirectLineWebSocketUser"
        },
        "conversation": {
          "id": "4dXItL2sJv2BiCN5mbJZf6-au"
        },
        "recipient": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9@BgLoquZzQf61FwhictbIX8YHGr8nOPQ6ed97CplUknTAFfuKnR85JQQJ99BDACZoyfiAArohAAABAZBS3jB0",
          "name": "Playground"
        },
        "locale": "en-AU",
        "value": {
          "userId": "PythonDirectLineWebSocketUser",
          "initialContext": "new_websocket_example_fused_activityset",
          "preferredLanguage": "en-US",
          "isAuthenticated": false
        },
        "name": "initialUserData"
      }
    ]
  },
  {
    "activities": [
      {
        "type": "message",
        "id": "4dXItL2sJv2BiCN5mbJZf6-au|0000001",
        "timestamp": "2025-05-13T04:46:12.1083116Z",
        "serviceUrl": "https://directline.botframework.com/",
        "channelId": "directline",
        "from": {
          "id": "PythonDirectLineWebSocketUser"
        },
        "conversation": {
          "id": "4dXItL2sJv2BiCN5mbJZf6-au"
        },
        "recipient": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9@BgLoquZzQf61FwhictbIX8YHGr8nOPQ6ed97CplUknTAFfuKnR85JQQJ99BDACZoyfiAArohAAABAZBS3jB0",
          "name": "Playground"
        },
        "locale": "en-AU",
        "text": "Hi bot, tell me about WebSockets and ActivitySets in Direct Line."
      }
    ]
  },
  {
    "activities": [
      {
        "type": "typing",
        "id": "4dXItL2sJv2BiCN5mbJZf6-au|taeDsfguOL",
        "timestamp": "2025-05-13T04:46:13.2915553Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4dXItL2sJv2BiCN5mbJZf6-au"
        },
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "attachments": [],
        "entities": [],
        "replyToId": "4dXItL2sJv2BiCN5mbJZf6-au|0000000",
        "listenFor": [],
        "textHighlights": []
      }
    ]
  },
  {
    "activities": [
      {
        "type": "message",
        "id": "4dXItL2sJv2BiCN5mbJZf6-au|0000002",
        "timestamp": "2025-05-13T04:46:13.3311992Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4dXItL2sJv2BiCN5mbJZf6-au"
        },
        "textFormat": "markdown",
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "text": "This is your initiaL EVENT DATA.. {\"initialContext\":\"new_websocket_example_fused_activityset\",\"isAuthenticated\":false,\"preferredLanguage\":\"en-US\",\"userId\":\"PythonDirectLineWebSocketUser\"}",
        "inputHint": "acceptingInput",
        "attachments": [],
        "entities": [],
        "replyToId": "4dXItL2sJv2BiCN5mbJZf6-au|0000000",
        "listenFor": [],
        "textHighlights": []
      }
    ],
    "watermark": "2"
  },
  {
    "activities": [
      {
        "type": "event",
        "id": "4dXItL2sJv2BiCN5mbJZf6-au|0000003",
        "timestamp": "2025-05-13T04:46:15.2248862Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4dXItL2sJv2BiCN5mbJZf6-au"
        },
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "attachments": [],
        "entities": [],
        "replyToId": "4dXItL2sJv2BiCN5mbJZf6-au|0000001",
        "valueType": "DynamicPlanReceived",
        "value": {
          "steps": [
            "P:UniversalSearchTool"
          ],
          "isFinalPlan": false,
          "planIdentifier": "1dc40487-8a73-4fd8-b39c-7610fbd3e23f",
          "toolDefinitions": []
        },
        "name": "DynamicPlanReceived",
        "listenFor": [],
        "textHighlights": []
      }
    ],
    "watermark": "3"
  },
  {
    "activities": [
      {
        "type": "event",
        "id": "4dXItL2sJv2BiCN5mbJZf6-au|0000004",
        "timestamp": "2025-05-13T04:46:15.6661089Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4dXItL2sJv2BiCN5mbJZf6-au"
        },
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "attachments": [],
        "entities": [],
        "replyToId": "4dXItL2sJv2BiCN5mbJZf6-au|0000001",
        "valueType": "DynamicPlanReceivedDebug",
        "value": {
          "summary": "",
          "ask": "Hi bot, tell me about WebSockets and ActivitySets in Direct Line.",
          "planIdentifier": "1dc40487-8a73-4fd8-b39c-7610fbd3e23f",
          "isFinalPlan": false
        },
        "name": "DynamicPlanReceivedDebug",
        "listenFor": [],
        "textHighlights": []
      }
    ],
    "watermark": "4"
  },
  {
    "activities": [
      {
        "type": "event",
        "id": "4dXItL2sJv2BiCN5mbJZf6-au|0000005",
        "timestamp": "2025-05-13T04:46:16.1260881Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4dXItL2sJv2BiCN5mbJZf6-au"
        },
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "attachments": [],
        "entities": [],
        "replyToId": "4dXItL2sJv2BiCN5mbJZf6-au|0000001",
        "valueType": "DynamicPlanStepTriggered",
        "value": {
          "planIdentifier": "1dc40487-8a73-4fd8-b39c-7610fbd3e23f",
          "stepId": "0def9553-f12d-475e-a8f5-448cd88e6013",
          "taskDialogId": "P:UniversalSearchTool",
          "thought": "This action needs to be done to provide detailed information about WebSockets and ActivitySets in Direct Line.",
          "state": "inProgress",
          "hasRecommendations": false,
          "type": "KnowledgeSource"
        },
        "name": "DynamicPlanStepTriggered",
        "listenFor": [],
        "textHighlights": []
      }
    ],
    "watermark": "5"
  },
  {
    "activities": [
      {
        "type": "event",
        "id": "4dXItL2sJv2BiCN5mbJZf6-au|0000006",
        "timestamp": "2025-05-13T04:46:16.5962665Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4dXItL2sJv2BiCN5mbJZf6-au"
        },
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "attachments": [],
        "entities": [],
        "replyToId": "4dXItL2sJv2BiCN5mbJZf6-au|0000001",
        "valueType": "DynamicPlanStepBindUpdate",
        "value": {
          "taskDialogId": "P:UniversalSearchTool",
          "stepId": "0def9553-f12d-475e-a8f5-448cd88e6013",
          "arguments": {
            "search_query": "WebSockets and ActivitySets in Direct Line",
            "search_keywords": "WebSockets, ActivitySets, Direct Line"
          },
          "planIdentifier": "1dc40487-8a73-4fd8-b39c-7610fbd3e23f"
        },
        "name": "DynamicPlanStepBindUpdate",
        "listenFor": [],
        "textHighlights": []
      }
    ],
    "watermark": "6"
  },
  {
    "activities": [
      {
        "type": "typing",
        "id": "4dXItL2sJv2BiCN5mbJZf6-au|5LYrIBIaXq5",
        "timestamp": "2025-05-13T04:46:20.6209203Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4dXItL2sJv2BiCN5mbJZf6-au"
        },
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "attachments": [],
        "entities": [],
        "replyToId": "4dXItL2sJv2BiCN5mbJZf6-au|0000001",
        "listenFor": [],
        "textHighlights": []
      }
    ]
  },
  {
    "activities": [
      {
        "type": "event",
        "id": "4dXItL2sJv2BiCN5mbJZf6-au|0000007",
        "timestamp": "2025-05-13T04:46:23.229656Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4dXItL2sJv2BiCN5mbJZf6-au"
        },
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "attachments": [],
        "entities": [],
        "replyToId": "4dXItL2sJv2BiCN5mbJZf6-au|0000001",
        "valueType": "UniversalSearchToolTraceData",
        "value": {
          "toolId": "P:UniversalSearchTool",
          "knowledgeSources": [
            "BingUnscopedSearchKnowledge"
          ],
          "outputKnowledgeSources": [],
          "fullResults": [],
          "filteredResults": []
        },
        "name": "UniversalSearchToolTraceData",
        "listenFor": [],
        "textHighlights": []
      }
    ],
    "watermark": "7"
  },
  {
    "activities": [
      {
        "type": "event",
        "id": "4dXItL2sJv2BiCN5mbJZf6-au|0000008",
        "timestamp": "2025-05-13T04:46:23.6687927Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4dXItL2sJv2BiCN5mbJZf6-au"
        },
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "attachments": [],
        "entities": [],
        "replyToId": "4dXItL2sJv2BiCN5mbJZf6-au|0000001",
        "valueType": "DynamicPlanStepFinished",
        "value": {
          "taskDialogId": "P:UniversalSearchTool",
          "stepId": "0def9553-f12d-475e-a8f5-448cd88e6013",
          "observation": {
            "search_result": {
              "Text": {
                "CitationSources": [
                  {
                    "Id": "https://learn.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-receive-activities?view=azure-bot-service-4.0",
                    "Name": "Receive activities from the bot - Bot Service | Microsoft Learn",
                    "Text": "\"Receive activities from the bot - Bot Service | Microsoft Learn\\nLearn\\nAzure\\nAI Services\\nAI Bot Service\\nReceive activities from the bot in Direct Line API 3.0\\nArticle\\n10/09/2024\\n9 contributors\\nFeedback\\nUsing the Direct Line 3.0 protocol, clients can receive activities via WebSocket stream or retrieve activities by issuing HTTP GET requests.\\nWebSocket vs HTTP GET\\nA streaming WebSocket efficiently pushes messages to clients, whereas the GET interface enables clients to explicitly request messages. Although the WebSocket mechanism is often preferred due to its efficiency, the GET mechanism can be useful for clients that are unable to use WebSockets.\\nThe service allows only 1 WebSocket connection per conversation. Direct Line may close additional WebSocket connections with a reason value of collision.\\nNot all activity types are available both via WebSocket and via HTTP GET. The following table describes the availability of the various activity types for clients that use the Direct Line protocol.\\nActivity type\\nAvailability\\nmessage\\nHTTP GET and WebSocket\\ntyping\\nWebSocket only\\nconversationUpdate\\nNot sent/received via client\\ncontactRelationUpdate\\nNot supported in Direct Line\\nendOfConversation\\nHTTP GET and WebSocket\\nall other activity types\\nHTTP GET and WebSocket\\nReceive activities via WebSocket stream\\nWhen a client sends a Start Conversation request to open a conversation with a bot, the service\\u0027s response includes a streamUrl property that the client can subsequently use to connect via WebSocket. The stream URL is preauthorized and therefore the client\\u0027s request to connect via WebSocket does NOT require an Authorization header.\\nThe following example shows a request that uses a streamUrl to connect via WebSocket.\\nHTTP\\nCopy\\n--  connect to wss://directline.botframework.com --\\nGET /v3/directline/conversations/abc123/stream?t=RCurR_XV9ZA.cwA...\\u0022\\nUpgrade: websocket\\n Connection: upgrade\\n[other headers]\\n\\nThe service responds with status code HTTP 101 (\\u0022Switching Protocols\\u0022).\\nHTTP\\nCopy\\nHTTP/1.1  101  Switching Protocols\\n[other headers]\\n\\nReceive messages\\nAfter it connects via WebSocket, a client may receive these types of messages from the Direct Line service:\\nA message that contains an ActivitySet that includes one or more activities and a watermark (described below).\\nAn empty message, which the Direct Line service uses to ensure the connection is still valid.\\nAdditional types, to be defined later. These types are identified by the properties in the JSON root.\\nAn ActivitySet contains messages sent by the bot and by all users in the conversation. The following example shows an ActivitySet that contains a single message.\\nJSON\\nCopy\\n{\\n     \\u0022activities\\u0022: [\\n        {\\n             \\u0022type\\u0022:  \\u0022message\\u0022,\\n             \\u0022channelId\\u0022:  \\u0022directline\\u0022,\\n             \\u0022conversation\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022abc123\\u0022 \\n            },\\n             \\u0022id\\u0022:  \\u0022abc123|0000\\u0022,\\n             \\u0022from\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022user1\\u0022 \\n            },\\n             \\u0022text\\u0022:  \\u0022hello\\u0022 \\n        }\\n    ],\\n     \\u0022watermark\\u0022:  \\u00220000a-42\\u0022 \\n}\\n\\nProcess messages\\nA client should keep track of the watermark value that it receives in each ActivitySet, so that it may use the watermark to guarantee that no messages are lost if it loses its connection and needs to reconnect to the conversation. If the client receives an ActivitySet wherein the watermark property is null or missing, it should ignore that value and not overwrite the prior watermark that it received.\\nA client should ignore empty messages that it receives from the Direct Line service.\\nA client may send empty messages to the Direct Line service to verify connectivity. The Direct Line service will ignore empty messages that it receives from the client.\\nThe Direct Line service may forcibly close the WebSocket connection under certain conditions. If the client has not received an endOfConversation activity, it may generate a new WebSocket stream URL that it can use to reconnect to the conversation.\\nThe WebSocket stream contains live updates and very recent messages (since the call to connect via WebSocket was issued) but it doesn\\u0027t include messages that were sent prior to the most recent POST to /v3/directline/conversations/{id}. To retrieve messages that were sent earlier in the conversation, use HTTP GET as described below.\\nRetrieve activities with HTTP GET\\nClients that are unable to use WebSockets can retrieve activities by using HTTP GET.\\nTo retrieve messages for a specific conversation, issue a GET request to the /v3/directline/conversations/{conversationId}/activities endpoint, optionally specifying the watermark parameter to indicate the most recent message seen by the client.\\nThe following snippets provide an example of the Get Conversation Activities request and response. The Get Conversation Activities response contains watermark as a property of the ActivitySet. Clients should page through the available activities by advancing the watermark value until no activities are returned.\\nRequest\\nHTTP\\nCopy\\nGET https://directline.botframework.com/v3/directline/conversations/abc123/activities?watermark=0001a-94\\nAuthorization: Bearer RCurR_XV9ZA.cwA.BKA.iaJrC8xpy8qbOF5xnR2vtCX7CZj0LdjAPGfiCpg4Fv0\\n\\nResponse\\nHTTP\\nCopy\\nHTTP/1.1  200  OK\\n[other headers]\\n\\nJSON\\nCopy\\n{\\n     \\u0022activities\\u0022: [\\n        {\\n             \\u0022type\\u0022:  \\u0022message\\u0022,\\n             \\u0022channelId\\u0022:  \\u0022directline\\u0022,\\n             \\u0022conversation\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022abc123\\u0022 \\n            },\\n             \\u0022id\\u0022:  \\u0022abc123|0000\\u0022,\\n             \\u0022from\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022user1\\u0022 \\n            },\\n             \\u0022text\\u0022:  \\u0022hello\\u0022 \\n        }, \\n        {\\n             \\u0022type\\u0022:  \\u0022message\\u0022,\\n             \\u0022channelId\\u0022:  \\u0022directline\\u0022,\\n             \\u0022conversation\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022abc123\\u0022 \\n            },\\n             \\u0022id\\u0022:  \\u0022abc123|0001\\u0022,\\n             \\u0022from\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022bot1\\u0022 \\n            },\\n             \\u0022text\\u0022:  \\u0022Nice to see you, user1!\\u0022 \\n        }\\n    ],\\n     \\u0022watermark\\u0022:  \\u00220001a-95\\u0022 \\n}\\n\\nTiming considerations\\nMost clients wish to retain a complete message history. Even though Direct Line is a multi-part protocol with potential timing gaps, the protocol and service is designed to make it easy to build a reliable client.\\nThe watermark property that is sent in the WebSocket stream and Get Conversation Activities response is reliable. A client won\\u0027t miss any messages as long as it replays the watermark verbatim.\\nWhen a client starts a conversation and connects to the WebSocket stream, any activities that are sent after the POST but before the socket is opened are replayed before new activities.\\nWhen a client issues a Get Conversation Activities request (to refresh history) while it\\u0027s connected to the WebSocket stream, activities may be duplicated across both channels. Clients should keep track of all known activity IDs so that they\\u0027re able to reject duplicate activities, should they occur.\\nClients that poll using HTTP GET should choose a polling interval that matches their intended use.\\nService-to-service applications often use a polling interval of 5s or 10s.\\nClient-facing applications often use a polling interval of 1s, and issue a single additional request shortly after every message that the client sends (to rapidly retrieve a bot\\u0027s response). This delay can be as short at 300ms but should be tuned based on the bot\\u0027s speed and transit time. Polling shouldn\\u0027t be more frequent than once per second for any extended period of time.\\nAdditional resources\\nKey concepts\\nAuthentication\\nStart a conversation\\nReconnect to a conversation\\nSend an activity to the bot\\nEnd a conversation\\nLearn how to receive activity updates from bots. See how to use version 3.0 of the Direct Line API to connect by using WebSocket streams or HTTP GET requests.\"",
                    "Type": "Unknown",
                    "Url": "https://learn.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-receive-activities?view=azure-bot-service-4.0"
                  }
                ],
                "Content": "## **WebSockets and ActivitySets in Direct Line**\n\n### **WebSockets**\n- **Connection**: Clients can connect to the Direct Line service using WebSocket by sending a Start Conversation request. The service response includes a `streamUrl` property, which the client uses to connect via WebSocket without requiring an Authorization header [1].\n- **Efficiency**: WebSocket is preferred for its efficiency in pushing messages to clients compared to HTTP GET, which requires explicit requests [1].\n- **Limitations**: Only one WebSocket connection per conversation is allowed. Additional connections may be closed with a reason value of collision [1].\n- **Message Types**: Not all activity types are available via WebSocket. For example, `typing` is available only via WebSocket, while `message` and `endOfConversation` are available via both WebSocket and HTTP GET [1].\n\n### **ActivitySets**\n- **Definition**: An ActivitySet contains messages sent by the bot and all users in the conversation. It includes one or more activities and a watermark [1].\n- **Example**: An ActivitySet might contain a message with properties such as `type`, `channelId`, `conversation`, `id`, `from`, and `text` [1].\n- **Watermark**: Clients should track the watermark value to ensure no messages are lost if the connection is interrupted. If the watermark is null or missing, the client should ignore it and retain the previous watermark [1].\n- **Empty Messages**: Clients should ignore empty messages received from the Direct Line service, which are used to verify the connection's validity [1].\n\n### **Pros and Cons**\n- **Pros**:\n  - **WebSocket**: Efficient message delivery, real-time updates, and reduced latency [1].\n  - **ActivitySets**: Ensures complete message history and reliable tracking of messages using the watermark [1].\n\n- **Cons**:\n  - **WebSocket**: Limited to one connection per conversation, potential for connection collisions [1].\n  - **ActivitySets**: Requires careful handling of watermarks and empty messages to maintain message integrity [1].\n\n### **Practical Examples**\n- **WebSocket Connection**: \n  - **Request**: `GET /v3/directline/conversations/abc123/stream?t=RCurR_XV9ZA.cwA...`\n  - **Response**: `HTTP/1.1 101 Switching Protocols` [1].\n\n- **ActivitySet Example**:\n  ```json\n  {\n    \"activities\": [\n      {\n        \"type\": \"message\",\n        \"channelId\": \"directline\",\n        \"conversation\": {\n          \"id\": \"abc123\"\n        },\n        \"id\": \"abc123|0000\",\n        \"from\": {\n          \"id\": \"user1\"\n        },\n        \"text\": \"hello\"\n      }\n    ],\n    \"watermark\": \"0000a-42\"\n  }\n  ```\n  [1]\n\nBy leveraging WebSockets and ActivitySets, clients can efficiently manage and track conversations with bots, ensuring reliable communication and message history.",
                "MarkdownContent": "## **WebSockets and ActivitySets in Direct Line**\n\n### **WebSockets**\n- **Connection**: Clients can connect to the Direct Line service using WebSocket by sending a Start Conversation request. The service response includes a `streamUrl` property, which the client uses to connect via WebSocket without requiring an Authorization header [1].\n- **Efficiency**: WebSocket is preferred for its efficiency in pushing messages to clients compared to HTTP GET, which requires explicit requests [1].\n- **Limitations**: Only one WebSocket connection per conversation is allowed. Additional connections may be closed with a reason value of collision [1].\n- **Message Types**: Not all activity types are available via WebSocket. For example, `typing` is available only via WebSocket, while `message` and `endOfConversation` are available via both WebSocket and HTTP GET [1].\n\n### **ActivitySets**\n- **Definition**: An ActivitySet contains messages sent by the bot and all users in the conversation. It includes one or more activities and a watermark [1].\n- **Example**: An ActivitySet might contain a message with properties such as `type`, `channelId`, `conversation`, `id`, `from`, and `text` [1].\n- **Watermark**: Clients should track the watermark value to ensure no messages are lost if the connection is interrupted. If the watermark is null or missing, the client should ignore it and retain the previous watermark [1].\n- **Empty Messages**: Clients should ignore empty messages received from the Direct Line service, which are used to verify the connection's validity [1].\n\n### **Pros and Cons**\n- **Pros**:\n  - **WebSocket**: Efficient message delivery, real-time updates, and reduced latency [1].\n  - **ActivitySets**: Ensures complete message history and reliable tracking of messages using the watermark [1].\n\n- **Cons**:\n  - **WebSocket**: Limited to one connection per conversation, potential for connection collisions [1].\n  - **ActivitySets**: Requires careful handling of watermarks and empty messages to maintain message integrity [1].\n\n### **Practical Examples**\n- **WebSocket Connection**: \n  - **Request**: `GET /v3/directline/conversations/abc123/stream?t=RCurR_XV9ZA.cwA...`\n  - **Response**: `HTTP/1.1 101 Switching Protocols` [1].\n\n- **ActivitySet Example**:\n  ```json\n  {\n    \"activities\": [\n      {\n        \"type\": \"message\",\n        \"channelId\": \"directline\",\n        \"conversation\": {\n          \"id\": \"abc123\"\n        },\n        \"id\": \"abc123|0000\",\n        \"from\": {\n          \"id\": \"user1\"\n        },\n        \"text\": \"hello\"\n      }\n    ],\n    \"watermark\": \"0000a-42\"\n  }\n  ```\n  [1]\n\nBy leveraging WebSockets and ActivitySets, clients can efficiently manage and track conversations with bots, ensuring reliable communication and message history.\n\n[1]: https://learn.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-receive-activities?view=azure-bot-service-4.0 \"Receive activities from the bot - Bot Service | Microsoft Learn\""
              }
            }
          },
          "planUsedOutputs": {},
          "planIdentifier": "1dc40487-8a73-4fd8-b39c-7610fbd3e23f",
          "state": "completed",
          "hasRecommendations": false
        },
        "name": "DynamicPlanStepFinished",
        "listenFor": [],
        "textHighlights": []
      }
    ],
    "watermark": "8"
  },
  {
    "activities": [
      {
        "type": "typing",
        "id": "4dXItL2sJv2BiCN5mbJZf6-au|3PWMcXqMo8B",
        "timestamp": "2025-05-13T04:46:24.6253301Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4dXItL2sJv2BiCN5mbJZf6-au"
        },
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "attachments": [],
        "entities": [],
        "replyToId": "4dXItL2sJv2BiCN5mbJZf6-au|0000001",
        "listenFor": [],
        "textHighlights": []
      }
    ]
  },
  {
    "activities": [
      {
        "type": "message",
        "id": "4dXItL2sJv2BiCN5mbJZf6-au|0000009",
        "timestamp": "2025-05-13T04:46:28.0661552Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4dXItL2sJv2BiCN5mbJZf6-au"
        },
        "textFormat": "markdown",
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "text": "WebSockets in Direct Line allow clients to connect to the service by sending a Start Conversation request, which includes a `streamUrl` property for WebSocket connection. WebSocket is efficient for pushing messages to clients compared to HTTP GET, but only one WebSocket connection per conversation is allowed. Not all activity types are available via WebSocket; for example, `typing` is available only via WebSocket, while `message` and `endOfConversation` are available via both WebSocket and HTTP GET [1].\n\nActivitySets contain messages sent by the bot and all users in the conversation, including one or more activities and a watermark. Clients should track the watermark to ensure no messages are lost if the connection is interrupted. Empty messages received from the Direct Line service should be ignored, as they are used to verify the connection's validity [1].\n\nPros of WebSocket include efficient message delivery, real-time updates, and reduced latency, while ActivitySets ensure complete message history and reliable tracking of messages using the watermark. Cons include WebSocket's limitation to one connection per conversation and potential for connection collisions, and ActivitySets' requirement for careful handling of watermarks and empty messages to maintain message integrity [1].\n\nPractical examples include WebSocket connection requests and responses, and ActivitySet examples with JSON structure [1].\n\n[1]: https://learn.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-receive-activities?view=azure-bot-service-4.0 \"Receive activities from the bot - Bot Service | Microsoft Learn\"",
        "inputHint": "acceptingInput",
        "attachments": [],
        "entities": [
          {
            "type": "https://schema.org/Message",
            "citation": [
              {
                "appearance": {
                  "text": "\"Receive activities from the bot - Bot Service | Microsoft Learn\\nLearn\\nAzure\\nAI Services\\nAI Bot Service\\nReceive activities from the bot in Direct Line API 3.0\\nArticle\\n10/09/2024\\n9 contributors\\nFeedback\\nUsing the Direct Line 3.0 protocol, clients can receive activities via WebSocket stream or retrieve activities by issuing HTTP GET requests.\\nWebSocket vs HTTP GET\\nA streaming WebSocket efficiently pushes messages to clients, whereas the GET interface enables clients to explicitly request messages. Although the WebSocket mechanism is often preferred due to its efficiency, the GET mechanism can be useful for clients that are unable to use WebSockets.\\nThe service allows only 1 WebSocket connection per conversation. Direct Line may close additional WebSocket connections with a reason value of collision.\\nNot all activity types are available both via WebSocket and via HTTP GET. The following table describes the availability of the various activity types for clients that use the Direct Line protocol.\\nActivity type\\nAvailability\\nmessage\\nHTTP GET and WebSocket\\ntyping\\nWebSocket only\\nconversationUpdate\\nNot sent/received via client\\ncontactRelationUpdate\\nNot supported in Direct Line\\nendOfConversation\\nHTTP GET and WebSocket\\nall other activity types\\nHTTP GET and WebSocket\\nReceive activities via WebSocket stream\\nWhen a client sends a Start Conversation request to open a conversation with a bot, the service\\u0027s response includes a streamUrl property that the client can subsequently use to connect via WebSocket. The stream URL is preauthorized and therefore the client\\u0027s request to connect via WebSocket does NOT require an Authorization header.\\nThe following example shows a request that uses a streamUrl to connect via WebSocket.\\nHTTP\\nCopy\\n--  connect to wss://directline.botframework.com --\\nGET /v3/directline/conversations/abc123/stream?t=RCurR_XV9ZA.cwA...\\u0022\\nUpgrade: websocket\\n Connection: upgrade\\n[other headers]\\n\\nThe service responds with status code HTTP 101 (\\u0022Switching Protocols\\u0022).\\nHTTP\\nCopy\\nHTTP/1.1  101  Switching Protocols\\n[other headers]\\n\\nReceive messages\\nAfter it connects via WebSocket, a client may receive these types of messages from the Direct Line service:\\nA message that contains an ActivitySet that includes one or more activities and a watermark (described below).\\nAn empty message, which the Direct Line service uses to ensure the connection is still valid.\\nAdditional types, to be defined later. These types are identified by the properties in the JSON root.\\nAn ActivitySet contains messages sent by the bot and by all users in the conversation. The following example shows an ActivitySet that contains a single message.\\nJSON\\nCopy\\n{\\n     \\u0022activities\\u0022: [\\n        {\\n             \\u0022type\\u0022:  \\u0022message\\u0022,\\n             \\u0022channelId\\u0022:  \\u0022directline\\u0022,\\n             \\u0022conversation\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022abc123\\u0022 \\n            },\\n             \\u0022id\\u0022:  \\u0022abc123|0000\\u0022,\\n             \\u0022from\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022user1\\u0022 \\n            },\\n             \\u0022text\\u0022:  \\u0022hello\\u0022 \\n        }\\n    ],\\n     \\u0022watermark\\u0022:  \\u00220000a-42\\u0022 \\n}\\n\\nProcess messages\\nA client should keep track of the watermark value that it receives in each ActivitySet, so that it may use the watermark to guarantee that no messages are lost if it loses its connection and needs to reconnect to the conversation. If the client receives an ActivitySet wherein the watermark property is null or missing, it should ignore that value and not overwrite the prior watermark that it received.\\nA client should ignore empty messages that it receives from the Direct Line service.\\nA client may send empty messages to the Direct Line service to verify connectivity. The Direct Line service will ignore empty messages that it receives from the client.\\nThe Direct Line service may forcibly close the WebSocket connection under certain conditions. If the client has not received an endOfConversation activity, it may generate a new WebSocket stream URL that it can use to reconnect to the conversation.\\nThe WebSocket stream contains live updates and very recent messages (since the call to connect via WebSocket was issued) but it doesn\\u0027t include messages that were sent prior to the most recent POST to /v3/directline/conversations/{id}. To retrieve messages that were sent earlier in the conversation, use HTTP GET as described below.\\nRetrieve activities with HTTP GET\\nClients that are unable to use WebSockets can retrieve activities by using HTTP GET.\\nTo retrieve messages for a specific conversation, issue a GET request to the /v3/directline/conversations/{conversationId}/activities endpoint, optionally specifying the watermark parameter to indicate the most recent message seen by the client.\\nThe following snippets provide an example of the Get Conversation Activities request and response. The Get Conversation Activities response contains watermark as a property of the ActivitySet. Clients should page through the available activities by advancing the watermark value until no activities are returned.\\nRequest\\nHTTP\\nCopy\\nGET https://directline.botframework.com/v3/directline/conversations/abc123/activities?watermark=0001a-94\\nAuthorization: Bearer RCurR_XV9ZA.cwA.BKA.iaJrC8xpy8qbOF5xnR2vtCX7CZj0LdjAPGfiCpg4Fv0\\n\\nResponse\\nHTTP\\nCopy\\nHTTP/1.1  200  OK\\n[other headers]\\n\\nJSON\\nCopy\\n{\\n     \\u0022activities\\u0022: [\\n        {\\n             \\u0022type\\u0022:  \\u0022message\\u0022,\\n             \\u0022channelId\\u0022:  \\u0022directline\\u0022,\\n             \\u0022conversation\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022abc123\\u0022 \\n            },\\n             \\u0022id\\u0022:  \\u0022abc123|0000\\u0022,\\n             \\u0022from\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022user1\\u0022 \\n            },\\n             \\u0022text\\u0022:  \\u0022hello\\u0022 \\n        }, \\n        {\\n             \\u0022type\\u0022:  \\u0022message\\u0022,\\n             \\u0022channelId\\u0022:  \\u0022directline\\u0022,\\n             \\u0022conversation\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022abc123\\u0022 \\n            },\\n             \\u0022id\\u0022:  \\u0022abc123|0001\\u0022,\\n             \\u0022from\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022bot1\\u0022 \\n            },\\n             \\u0022text\\u0022:  \\u0022Nice to see you, user1!\\u0022 \\n        }\\n    ],\\n     \\u0022watermark\\u0022:  \\u00220001a-95\\u0022 \\n}\\n\\nTiming considerations\\nMost clients wish to retain a complete message history. Even though Direct Line is a multi-part protocol with potential timing gaps, the protocol and service is designed to make it easy to build a reliable client.\\nThe watermark property that is sent in the WebSocket stream and Get Conversation Activities response is reliable. A client won\\u0027t miss any messages as long as it replays the watermark verbatim.\\nWhen a client starts a conversation and connects to the WebSocket stream, any activities that are sent after the POST but before the socket is opened are replayed before new activities.\\nWhen a client issues a Get Conversation Activities request (to refresh history) while it\\u0027s connected to the WebSocket stream, activities may be duplicated across both channels. Clients should keep track of all known activity IDs so that they\\u0027re able to reject duplicate activities, should they occur.\\nClients that poll using HTTP GET should choose a polling interval that matches their intended use.\\nService-to-service applications often use a polling interval of 5s or 10s.\\nClient-facing applications often use a polling interval of 1s, and issue a single additional request shortly after every message that the client sends (to rapidly retrieve a bot\\u0027s response). This delay can be as short at 300ms but should be tuned based on the bot\\u0027s speed and transit time. Polling shouldn\\u0027t be more frequent than once per second for any extended period of time.\\nAdditional resources\\nKey concepts\\nAuthentication\\nStart a conversation\\nReconnect to a conversation\\nSend an activity to the bot\\nEnd a conversation\\nLearn how to receive activity updates from bots. See how to use version 3.0 of the Direct Line API to connect by using WebSocket streams or HTTP GET requests.\"",
                  "abstract": "Receive activities from the bot - Bot Service | Microsoft Learn",
                  "@type": "DigitalDocument",
                  "name": "Receive activities from the bot - Bot Service | Microsoft Learn",
                  "url": "https://learn.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-receive-activities?view=azure-bot-service-4.0"
                },
                "position": 1,
                "@type": "Claim",
                "@id": "https://learn.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-receive-activities?view=azure-bot-service-4.0"
              }
            ],
            "@type": "Message",
            "@id": "",
            "additionalType": [
              "AIGeneratedContent"
            ],
            "@context": "https://schema.org"
          },
          {
            "type": "https://schema.org/Claim",
            "@id": "https://learn.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-receive-activities?view=azure-bot-service-4.0",
            "@type": "Claim",
            "@context": "https://schema.org",
            "text": "\"Receive activities from the bot - Bot Service | Microsoft Learn\\nLearn\\nAzure\\nAI Services\\nAI Bot Service\\nReceive activities from the bot in Direct Line API 3.0\\nArticle\\n10/09/2024\\n9 contributors\\nFeedback\\nUsing the Direct Line 3.0 protocol, clients can receive activities via WebSocket stream or retrieve activities by issuing HTTP GET requests.\\nWebSocket vs HTTP GET\\nA streaming WebSocket efficiently pushes messages to clients, whereas the GET interface enables clients to explicitly request messages. Although the WebSocket mechanism is often preferred due to its efficiency, the GET mechanism can be useful for clients that are unable to use WebSockets.\\nThe service allows only 1 WebSocket connection per conversation. Direct Line may close additional WebSocket connections with a reason value of collision.\\nNot all activity types are available both via WebSocket and via HTTP GET. The following table describes the availability of the various activity types for clients that use the Direct Line protocol.\\nActivity type\\nAvailability\\nmessage\\nHTTP GET and WebSocket\\ntyping\\nWebSocket only\\nconversationUpdate\\nNot sent/received via client\\ncontactRelationUpdate\\nNot supported in Direct Line\\nendOfConversation\\nHTTP GET and WebSocket\\nall other activity types\\nHTTP GET and WebSocket\\nReceive activities via WebSocket stream\\nWhen a client sends a Start Conversation request to open a conversation with a bot, the service\\u0027s response includes a streamUrl property that the client can subsequently use to connect via WebSocket. The stream URL is preauthorized and therefore the client\\u0027s request to connect via WebSocket does NOT require an Authorization header.\\nThe following example shows a request that uses a streamUrl to connect via WebSocket.\\nHTTP\\nCopy\\n--  connect to wss://directline.botframework.com --\\nGET /v3/directline/conversations/abc123/stream?t=RCurR_XV9ZA.cwA...\\u0022\\nUpgrade: websocket\\n Connection: upgrade\\n[other headers]\\n\\nThe service responds with status code HTTP 101 (\\u0022Switching Protocols\\u0022).\\nHTTP\\nCopy\\nHTTP/1.1  101  Switching Protocols\\n[other headers]\\n\\nReceive messages\\nAfter it connects via WebSocket, a client may receive these types of messages from the Direct Line service:\\nA message that contains an ActivitySet that includes one or more activities and a watermark (described below).\\nAn empty message, which the Direct Line service uses to ensure the connection is still valid.\\nAdditional types, to be defined later. These types are identified by the properties in the JSON root.\\nAn ActivitySet contains messages sent by the bot and by all users in the conversation. The following example shows an ActivitySet that contains a single message.\\nJSON\\nCopy\\n{\\n     \\u0022activities\\u0022: [\\n        {\\n             \\u0022type\\u0022:  \\u0022message\\u0022,\\n             \\u0022channelId\\u0022:  \\u0022directline\\u0022,\\n             \\u0022conversation\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022abc123\\u0022 \\n            },\\n             \\u0022id\\u0022:  \\u0022abc123|0000\\u0022,\\n             \\u0022from\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022user1\\u0022 \\n            },\\n             \\u0022text\\u0022:  \\u0022hello\\u0022 \\n        }\\n    ],\\n     \\u0022watermark\\u0022:  \\u00220000a-42\\u0022 \\n}\\n\\nProcess messages\\nA client should keep track of the watermark value that it receives in each ActivitySet, so that it may use the watermark to guarantee that no messages are lost if it loses its connection and needs to reconnect to the conversation. If the client receives an ActivitySet wherein the watermark property is null or missing, it should ignore that value and not overwrite the prior watermark that it received.\\nA client should ignore empty messages that it receives from the Direct Line service.\\nA client may send empty messages to the Direct Line service to verify connectivity. The Direct Line service will ignore empty messages that it receives from the client.\\nThe Direct Line service may forcibly close the WebSocket connection under certain conditions. If the client has not received an endOfConversation activity, it may generate a new WebSocket stream URL that it can use to reconnect to the conversation.\\nThe WebSocket stream contains live updates and very recent messages (since the call to connect via WebSocket was issued) but it doesn\\u0027t include messages that were sent prior to the most recent POST to /v3/directline/conversations/{id}. To retrieve messages that were sent earlier in the conversation, use HTTP GET as described below.\\nRetrieve activities with HTTP GET\\nClients that are unable to use WebSockets can retrieve activities by using HTTP GET.\\nTo retrieve messages for a specific conversation, issue a GET request to the /v3/directline/conversations/{conversationId}/activities endpoint, optionally specifying the watermark parameter to indicate the most recent message seen by the client.\\nThe following snippets provide an example of the Get Conversation Activities request and response. The Get Conversation Activities response contains watermark as a property of the ActivitySet. Clients should page through the available activities by advancing the watermark value until no activities are returned.\\nRequest\\nHTTP\\nCopy\\nGET https://directline.botframework.com/v3/directline/conversations/abc123/activities?watermark=0001a-94\\nAuthorization: Bearer RCurR_XV9ZA.cwA.BKA.iaJrC8xpy8qbOF5xnR2vtCX7CZj0LdjAPGfiCpg4Fv0\\n\\nResponse\\nHTTP\\nCopy\\nHTTP/1.1  200  OK\\n[other headers]\\n\\nJSON\\nCopy\\n{\\n     \\u0022activities\\u0022: [\\n        {\\n             \\u0022type\\u0022:  \\u0022message\\u0022,\\n             \\u0022channelId\\u0022:  \\u0022directline\\u0022,\\n             \\u0022conversation\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022abc123\\u0022 \\n            },\\n             \\u0022id\\u0022:  \\u0022abc123|0000\\u0022,\\n             \\u0022from\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022user1\\u0022 \\n            },\\n             \\u0022text\\u0022:  \\u0022hello\\u0022 \\n        }, \\n        {\\n             \\u0022type\\u0022:  \\u0022message\\u0022,\\n             \\u0022channelId\\u0022:  \\u0022directline\\u0022,\\n             \\u0022conversation\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022abc123\\u0022 \\n            },\\n             \\u0022id\\u0022:  \\u0022abc123|0001\\u0022,\\n             \\u0022from\\u0022: {\\n                 \\u0022id\\u0022:  \\u0022bot1\\u0022 \\n            },\\n             \\u0022text\\u0022:  \\u0022Nice to see you, user1!\\u0022 \\n        }\\n    ],\\n     \\u0022watermark\\u0022:  \\u00220001a-95\\u0022 \\n}\\n\\nTiming considerations\\nMost clients wish to retain a complete message history. Even though Direct Line is a multi-part protocol with potential timing gaps, the protocol and service is designed to make it easy to build a reliable client.\\nThe watermark property that is sent in the WebSocket stream and Get Conversation Activities response is reliable. A client won\\u0027t miss any messages as long as it replays the watermark verbatim.\\nWhen a client starts a conversation and connects to the WebSocket stream, any activities that are sent after the POST but before the socket is opened are replayed before new activities.\\nWhen a client issues a Get Conversation Activities request (to refresh history) while it\\u0027s connected to the WebSocket stream, activities may be duplicated across both channels. Clients should keep track of all known activity IDs so that they\\u0027re able to reject duplicate activities, should they occur.\\nClients that poll using HTTP GET should choose a polling interval that matches their intended use.\\nService-to-service applications often use a polling interval of 5s or 10s.\\nClient-facing applications often use a polling interval of 1s, and issue a single additional request shortly after every message that the client sends (to rapidly retrieve a bot\\u0027s response). This delay can be as short at 300ms but should be tuned based on the bot\\u0027s speed and transit time. Polling shouldn\\u0027t be more frequent than once per second for any extended period of time.\\nAdditional resources\\nKey concepts\\nAuthentication\\nStart a conversation\\nReconnect to a conversation\\nSend an activity to the bot\\nEnd a conversation\\nLearn how to receive activity updates from bots. See how to use version 3.0 of the Direct Line API to connect by using WebSocket streams or HTTP GET requests.\"",
            "name": "Receive activities from the bot - Bot Service | Microsoft Learn"
          }
        ],
        "replyToId": "4dXItL2sJv2BiCN5mbJZf6-au|0000001",
        "listenFor": [],
        "textHighlights": []
      }
    ],
    "watermark": "9"
  },
  {
    "activities": [
      {
        "type": "event",
        "id": "4dXItL2sJv2BiCN5mbJZf6-au|0000010",
        "timestamp": "2025-05-13T04:46:28.5652153Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4dXItL2sJv2BiCN5mbJZf6-au"
        },
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "attachments": [],
        "entities": [],
        "replyToId": "4dXItL2sJv2BiCN5mbJZf6-au|0000001",
        "valueType": "DynamicPlanFinished",
        "value": {
          "planId": "2c1a8d0e-6ca9-4884-adfe-6dee5de478f7"
        },
        "name": "DynamicPlanFinished",
        "listenFor": [],
        "textHighlights": []
      }
    ],
    "watermark": "10"
  },
  {
    "activities": [
      {
        "type": "message",
        "id": "4dXItL2sJv2BiCN5mbJZf6-au|0000011",
        "timestamp": "2025-05-13T04:46:28.8024838Z",
        "channelId": "directline",
        "from": {
          "id": "9b21c59b-6aff-eb7a-7a40-5129245a93a9",
          "name": "Playground",
          "role": "bot"
        },
        "conversation": {
          "id": "4dXItL2sJv2BiCN5mbJZf6-au"
        },
        "textFormat": "markdown",
        "membersAdded": [],
        "membersRemoved": [],
        "reactionsAdded": [],
        "reactionsRemoved": [],
        "locale": "en-AU",
        "text": "Did that answer your question?",
        "inputHint": "acceptingInput",
        "suggestedActions": {
          "to": [],
          "actions": [
            {
              "type": "imBack",
              "title": "Yes",
              "text": "Yes",
              "value": "Yes"
            },
            {
              "type": "imBack",
              "title": "No",
              "text": "No",
              "value": "No"
            }
          ]
        },
        "attachments": [],
        "entities": [],
        "replyToId": "4dXItL2sJv2BiCN5mbJZf6-au|0000001",
        "listenFor": [],
        "textHighlights": []
      }
    ],
    "watermark": "11"
  }
]